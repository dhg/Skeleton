{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;AAAA,IAAO,SAAS,WAAW,YAAY,CAAC,CAAA;AAOxC,wBACE,KAAwB,EACxB,MAAqE;IAArE,sBAAqE,GAArE,SAAsC,cAAc,CAAC,SAAgB;IAErE,MAAM,CAAC,SAAS,CAAC,KAAK,EAAE,MAAM,CAAC,CAAA;AACjC,CAAC;AAED,IAAU,cAAc,CAoBvB;AApBD,WAAU,cAAc,EAAC,CAAC;IAExB;QAA+B,6BAAmB;QAEhD,mBAAa,OAAe,EAAS,KAAa;YAChD,kBAAM,OAAO,CAAC,CAAA;YADqB,UAAK,GAAL,KAAK,CAAQ;QAElD,CAAC;QAED,4BAAQ,GAAR;YACE,MAAM,CAAC,gBAAK,CAAC,QAAQ,WAAE,GAAG,CAAC,IAAI,CAAC,KAAK,GAAG,kBAAgB,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAI,GAAG,EAAE,CAAC,CAAA;QACvF,CAAC;QAEH,gBAAC;IAAD,CAAC,AAVD,CAA+B,SAAS,CAAC,SAAS,GAUjD;IAVY,wBAAS,YAUrB,CAAA;AAQH,CAAC,EApBS,cAAc,KAAd,cAAc,QAoBvB;AAED,iBAAS,cAAc,CAAA","sourcesContent":["import makeError = require('make-error')\n\nfunction makeErrorCause (value: string | Function): makeErrorCause.Constructor<makeErrorCause.BaseError>\nfunction makeErrorCause <T extends Error> (\n  value: string | Function,\n  _super: { new (...args: any[]): T }\n): makeErrorCause.Constructor<T>\nfunction makeErrorCause <T extends Error> (\n  value: string | Function,\n  _super: { new (...args: any[]): T } = makeErrorCause.BaseError as any\n): makeErrorCause.Constructor<T> {\n  return makeError(value, _super)\n}\n\nnamespace makeErrorCause {\n\n  export class BaseError extends makeError.BaseError {\n\n    constructor (message: string, public cause?: Error) {\n      super(message)\n    }\n\n    toString () {\n      return super.toString() + (this.cause ? `\\nCaused by: ${this.cause.toString()}` : '')\n    }\n\n  }\n\n  export interface Constructor <T> {\n    new (message: string, cause?: Error): T\n    super_: any\n    prototype: T\n  }\n\n}\n\nexport = makeErrorCause\n"]}