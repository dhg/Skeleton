export declare const NAMED_ENTITIES: {
    'Aacute': string;
    'aacute': string;
    'Acirc': string;
    'acirc': string;
    'acute': string;
    'AElig': string;
    'aelig': string;
    'Agrave': string;
    'agrave': string;
    'alefsym': string;
    'Alpha': string;
    'alpha': string;
    'amp': string;
    'and': string;
    'ang': string;
    'apos': string;
    'Aring': string;
    'aring': string;
    'asymp': string;
    'Atilde': string;
    'atilde': string;
    'Auml': string;
    'auml': string;
    'bdquo': string;
    'Beta': string;
    'beta': string;
    'brvbar': string;
    'bull': string;
    'cap': string;
    'Ccedil': string;
    'ccedil': string;
    'cedil': string;
    'cent': string;
    'Chi': string;
    'chi': string;
    'circ': string;
    'clubs': string;
    'cong': string;
    'copy': string;
    'crarr': string;
    'cup': string;
    'curren': string;
    'dagger': string;
    'Dagger': string;
    'darr': string;
    'dArr': string;
    'deg': string;
    'Delta': string;
    'delta': string;
    'diams': string;
    'divide': string;
    'Eacute': string;
    'eacute': string;
    'Ecirc': string;
    'ecirc': string;
    'Egrave': string;
    'egrave': string;
    'empty': string;
    'emsp': string;
    'ensp': string;
    'Epsilon': string;
    'epsilon': string;
    'equiv': string;
    'Eta': string;
    'eta': string;
    'ETH': string;
    'eth': string;
    'Euml': string;
    'euml': string;
    'euro': string;
    'exist': string;
    'fnof': string;
    'forall': string;
    'frac12': string;
    'frac14': string;
    'frac34': string;
    'frasl': string;
    'Gamma': string;
    'gamma': string;
    'ge': string;
    'gt': string;
    'harr': string;
    'hArr': string;
    'hearts': string;
    'hellip': string;
    'Iacute': string;
    'iacute': string;
    'Icirc': string;
    'icirc': string;
    'iexcl': string;
    'Igrave': string;
    'igrave': string;
    'image': string;
    'infin': string;
    'int': string;
    'Iota': string;
    'iota': string;
    'iquest': string;
    'isin': string;
    'Iuml': string;
    'iuml': string;
    'Kappa': string;
    'kappa': string;
    'Lambda': string;
    'lambda': string;
    'lang': string;
    'laquo': string;
    'larr': string;
    'lArr': string;
    'lceil': string;
    'ldquo': string;
    'le': string;
    'lfloor': string;
    'lowast': string;
    'loz': string;
    'lrm': string;
    'lsaquo': string;
    'lsquo': string;
    'lt': string;
    'macr': string;
    'mdash': string;
    'micro': string;
    'middot': string;
    'minus': string;
    'Mu': string;
    'mu': string;
    'nabla': string;
    'nbsp': string;
    'ndash': string;
    'ne': string;
    'ni': string;
    'not': string;
    'notin': string;
    'nsub': string;
    'Ntilde': string;
    'ntilde': string;
    'Nu': string;
    'nu': string;
    'Oacute': string;
    'oacute': string;
    'Ocirc': string;
    'ocirc': string;
    'OElig': string;
    'oelig': string;
    'Ograve': string;
    'ograve': string;
    'oline': string;
    'Omega': string;
    'omega': string;
    'Omicron': string;
    'omicron': string;
    'oplus': string;
    'or': string;
    'ordf': string;
    'ordm': string;
    'Oslash': string;
    'oslash': string;
    'Otilde': string;
    'otilde': string;
    'otimes': string;
    'Ouml': string;
    'ouml': string;
    'para': string;
    'permil': string;
    'perp': string;
    'Phi': string;
    'phi': string;
    'Pi': string;
    'pi': string;
    'piv': string;
    'plusmn': string;
    'pound': string;
    'prime': string;
    'Prime': string;
    'prod': string;
    'prop': string;
    'Psi': string;
    'psi': string;
    'quot': string;
    'radic': string;
    'rang': string;
    'raquo': string;
    'rarr': string;
    'rArr': string;
    'rceil': string;
    'rdquo': string;
    'real': string;
    'reg': string;
    'rfloor': string;
    'Rho': string;
    'rho': string;
    'rlm': string;
    'rsaquo': string;
    'rsquo': string;
    'sbquo': string;
    'Scaron': string;
    'scaron': string;
    'sdot': string;
    'sect': string;
    'shy': string;
    'Sigma': string;
    'sigma': string;
    'sigmaf': string;
    'sim': string;
    'spades': string;
    'sub': string;
    'sube': string;
    'sum': string;
    'sup': string;
    'sup1': string;
    'sup2': string;
    'sup3': string;
    'supe': string;
    'szlig': string;
    'Tau': string;
    'tau': string;
    'there4': string;
    'Theta': string;
    'theta': string;
    'thetasym': string;
    'thinsp': string;
    'THORN': string;
    'thorn': string;
    'tilde': string;
    'times': string;
    'trade': string;
    'Uacute': string;
    'uacute': string;
    'uarr': string;
    'uArr': string;
    'Ucirc': string;
    'ucirc': string;
    'Ugrave': string;
    'ugrave': string;
    'uml': string;
    'upsih': string;
    'Upsilon': string;
    'upsilon': string;
    'Uuml': string;
    'uuml': string;
    'weierp': string;
    'Xi': string;
    'xi': string;
    'Yacute': string;
    'yacute': string;
    'yen': string;
    'yuml': string;
    'Yuml': string;
    'Zeta': string;
    'zeta': string;
    'zwj': string;
    'zwnj': string;
};
export declare enum HtmlTagContentType {
    RAW_TEXT = 0,
    ESCAPABLE_RAW_TEXT = 1,
    PARSABLE_DATA = 2,
}
export declare class HtmlTagDefinition {
    private closedByChildren;
    closedByParent: boolean;
    requiredParents: {
        [key: string]: boolean;
    };
    parentToAdd: string;
    implicitNamespacePrefix: string;
    contentType: HtmlTagContentType;
    isVoid: boolean;
    ignoreFirstLf: boolean;
    constructor({closedByChildren, requiredParents, implicitNamespacePrefix, contentType, closedByParent, isVoid, ignoreFirstLf}?: {
        closedByChildren?: string[];
        closedByParent?: boolean;
        requiredParents?: string[];
        implicitNamespacePrefix?: string;
        contentType?: HtmlTagContentType;
        isVoid?: boolean;
        ignoreFirstLf?: boolean;
    });
    requireExtraParent(currentParent: string): boolean;
    isClosedByChild(name: string): boolean;
}
export declare function getHtmlTagDefinition(tagName: string): HtmlTagDefinition;
export declare function splitNsName(elementName: string): string[];
export declare function getNsPrefix(elementName: string): string;
export declare function mergeNsAndName(prefix: string, localName: string): string;
