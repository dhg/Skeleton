import { global } from 'angular2/src/facade/lang';
// This is here only so that after TS transpilation the file is not empty.
// TODO(rado): find a better way to fix this, or remove if likely culprit
// https://github.com/systemjs/systemjs/issues/487 gets closed.
var __ignore_me = global;
var __make_dart_analyzer_happy = null;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJmYWNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFuZ3VsYXIyL3NyYy9yb3V0ZXIvaW50ZXJmYWNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiT0FDTyxFQUFDLE1BQU0sRUFBQyxNQUFNLDBCQUEwQjtBQUUvQywwRUFBMEU7QUFDMUUseUVBQXlFO0FBQ3pFLCtEQUErRDtBQUMvRCxJQUFJLFdBQVcsR0FBRyxNQUFNLENBQUM7QUFDekIsSUFBSSwwQkFBMEIsR0FBaUIsSUFBSSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnRJbnN0cnVjdGlvbn0gZnJvbSAnLi9pbnN0cnVjdGlvbic7XG5pbXBvcnQge2dsb2JhbH0gZnJvbSAnYW5ndWxhcjIvc3JjL2ZhY2FkZS9sYW5nJztcblxuLy8gVGhpcyBpcyBoZXJlIG9ubHkgc28gdGhhdCBhZnRlciBUUyB0cmFuc3BpbGF0aW9uIHRoZSBmaWxlIGlzIG5vdCBlbXB0eS5cbi8vIFRPRE8ocmFkbyk6IGZpbmQgYSBiZXR0ZXIgd2F5IHRvIGZpeCB0aGlzLCBvciByZW1vdmUgaWYgbGlrZWx5IGN1bHByaXRcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9zeXN0ZW1qcy9zeXN0ZW1qcy9pc3N1ZXMvNDg3IGdldHMgY2xvc2VkLlxudmFyIF9faWdub3JlX21lID0gZ2xvYmFsO1xudmFyIF9fbWFrZV9kYXJ0X2FuYWx5emVyX2hhcHB5OiBQcm9taXNlPGFueT4gPSBudWxsO1xuXG4vKipcbiAqIERlZmluZXMgcm91dGUgbGlmZWN5Y2xlIG1ldGhvZCBgcm91dGVyT25BY3RpdmF0ZWAsIHdoaWNoIGlzIGNhbGxlZCBieSB0aGUgcm91dGVyIGF0IHRoZSBlbmQgb2YgYVxuICogc3VjY2Vzc2Z1bCByb3V0ZSBuYXZpZ2F0aW9uLlxuICpcbiAqIEZvciBhIHNpbmdsZSBjb21wb25lbnQncyBuYXZpZ2F0aW9uLCBvbmx5IG9uZSBvZiBlaXRoZXIge0BsaW5rIE9uQWN0aXZhdGV9IG9yIHtAbGluayBPblJldXNlfVxuICogd2lsbCBiZSBjYWxsZWQgZGVwZW5kaW5nIG9uIHRoZSByZXN1bHQgb2Yge0BsaW5rIENhblJldXNlfS5cbiAqXG4gKiBUaGUgYHJvdXRlck9uQWN0aXZhdGVgIGhvb2sgaXMgY2FsbGVkIHdpdGggdHdvIHtAbGluayBDb21wb25lbnRJbnN0cnVjdGlvbn1zIGFzIHBhcmFtZXRlcnMsIHRoZVxuICogZmlyc3RcbiAqIHJlcHJlc2VudGluZyB0aGUgY3VycmVudCByb3V0ZSBiZWluZyBuYXZpZ2F0ZWQgdG8sIGFuZCB0aGUgc2Vjb25kIHBhcmFtZXRlciByZXByZXNlbnRpbmcgdGhlXG4gKiBwcmV2aW91cyByb3V0ZSBvciBgbnVsbGAuXG4gKlxuICogSWYgYHJvdXRlck9uQWN0aXZhdGVgIHJldHVybnMgYSBwcm9taXNlLCB0aGUgcm91dGUgY2hhbmdlIHdpbGwgd2FpdCB1bnRpbCB0aGUgcHJvbWlzZSBzZXR0bGVzIHRvXG4gKiBpbnN0YW50aWF0ZSBhbmQgYWN0aXZhdGUgY2hpbGQgY29tcG9uZW50cy5cbiAqXG4gKiAjIyMgRXhhbXBsZVxuICoge0BleGFtcGxlIHJvdXRlci90cy9vbl9hY3RpdmF0ZS9vbl9hY3RpdmF0ZV9leGFtcGxlLnRzIHJlZ2lvbj0ncm91dGVyT25BY3RpdmF0ZSd9XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgT25BY3RpdmF0ZSB7XG4gIHJvdXRlck9uQWN0aXZhdGUobmV4dEluc3RydWN0aW9uOiBDb21wb25lbnRJbnN0cnVjdGlvbixcbiAgICAgICAgICAgICAgICAgICBwcmV2SW5zdHJ1Y3Rpb246IENvbXBvbmVudEluc3RydWN0aW9uKTogYW55IHxcbiAgICAgIFByb21pc2U8YW55Pjtcbn1cblxuLyoqXG4gKiBEZWZpbmVzIHJvdXRlIGxpZmVjeWNsZSBtZXRob2QgYHJvdXRlck9uUmV1c2VgLCB3aGljaCBpcyBjYWxsZWQgYnkgdGhlIHJvdXRlciBhdCB0aGUgZW5kIG9mIGFcbiAqIHN1Y2Nlc3NmdWwgcm91dGUgbmF2aWdhdGlvbiB3aGVuIHtAbGluayBDYW5SZXVzZX0gaXMgaW1wbGVtZW50ZWQgYW5kIHJldHVybnMgb3IgcmVzb2x2ZXMgdG8gdHJ1ZS5cbiAqXG4gKiBGb3IgYSBzaW5nbGUgY29tcG9uZW50J3MgbmF2aWdhdGlvbiwgb25seSBvbmUgb2YgZWl0aGVyIHtAbGluayBPbkFjdGl2YXRlfSBvciB7QGxpbmsgT25SZXVzZX1cbiAqIHdpbGwgYmUgY2FsbGVkLCBkZXBlbmRpbmcgb24gdGhlIHJlc3VsdCBvZiB7QGxpbmsgQ2FuUmV1c2V9LlxuICpcbiAqIFRoZSBgcm91dGVyT25SZXVzZWAgaG9vayBpcyBjYWxsZWQgd2l0aCB0d28ge0BsaW5rIENvbXBvbmVudEluc3RydWN0aW9ufXMgYXMgcGFyYW1ldGVycywgdGhlXG4gKiBmaXJzdFxuICogcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IHJvdXRlIGJlaW5nIG5hdmlnYXRlZCB0bywgYW5kIHRoZSBzZWNvbmQgcGFyYW1ldGVyIHJlcHJlc2VudGluZyB0aGVcbiAqIHByZXZpb3VzIHJvdXRlIG9yIGBudWxsYC5cbiAqXG4gKiAjIyMgRXhhbXBsZVxuICoge0BleGFtcGxlIHJvdXRlci90cy9yZXVzZS9yZXVzZV9leGFtcGxlLnRzIHJlZ2lvbj0ncmV1c2VDbXAnfVxuICovXG5leHBvcnQgaW50ZXJmYWNlIE9uUmV1c2Uge1xuICByb3V0ZXJPblJldXNlKG5leHRJbnN0cnVjdGlvbjogQ29tcG9uZW50SW5zdHJ1Y3Rpb24sIHByZXZJbnN0cnVjdGlvbjogQ29tcG9uZW50SW5zdHJ1Y3Rpb24pOiBhbnkgfFxuICAgICAgUHJvbWlzZTxhbnk+O1xufVxuXG4vKipcbiAqIERlZmluZXMgcm91dGUgbGlmZWN5Y2xlIG1ldGhvZCBgcm91dGVyT25EZWFjdGl2YXRlYCwgd2hpY2ggaXMgY2FsbGVkIGJ5IHRoZSByb3V0ZXIgYmVmb3JlXG4gKiBkZXN0cm95aW5nXG4gKiBhIGNvbXBvbmVudCBhcyBwYXJ0IG9mIGEgcm91dGUgY2hhbmdlLlxuICpcbiAqIFRoZSBgcm91dGVyT25EZWFjdGl2YXRlYCBob29rIGlzIGNhbGxlZCB3aXRoIHR3byB7QGxpbmsgQ29tcG9uZW50SW5zdHJ1Y3Rpb259cyBhcyBwYXJhbWV0ZXJzLCB0aGVcbiAqIGZpcnN0XG4gKiByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnQgcm91dGUgYmVpbmcgbmF2aWdhdGVkIHRvLCBhbmQgdGhlIHNlY29uZCBwYXJhbWV0ZXIgcmVwcmVzZW50aW5nIHRoZVxuICogcHJldmlvdXMgcm91dGUuXG4gKlxuICogSWYgYHJvdXRlck9uRGVhY3RpdmF0ZWAgcmV0dXJucyBhIHByb21pc2UsIHRoZSByb3V0ZSBjaGFuZ2Ugd2lsbCB3YWl0IHVudGlsIHRoZSBwcm9taXNlIHNldHRsZXMuXG4gKlxuICogIyMjIEV4YW1wbGVcbiAqIHtAZXhhbXBsZSByb3V0ZXIvdHMvb25fZGVhY3RpdmF0ZS9vbl9kZWFjdGl2YXRlX2V4YW1wbGUudHMgcmVnaW9uPSdyb3V0ZXJPbkRlYWN0aXZhdGUnfVxuICovXG5leHBvcnQgaW50ZXJmYWNlIE9uRGVhY3RpdmF0ZSB7XG4gIHJvdXRlck9uRGVhY3RpdmF0ZShuZXh0SW5zdHJ1Y3Rpb246IENvbXBvbmVudEluc3RydWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgcHJldkluc3RydWN0aW9uOiBDb21wb25lbnRJbnN0cnVjdGlvbik6IGFueSB8XG4gICAgICBQcm9taXNlPGFueT47XG59XG5cbi8qKlxuICogRGVmaW5lcyByb3V0ZSBsaWZlY3ljbGUgbWV0aG9kIGByb3V0ZXJDYW5SZXVzZWAsIHdoaWNoIGlzIGNhbGxlZCBieSB0aGUgcm91dGVyIHRvIGRldGVybWluZVxuICogd2hldGhlciBhXG4gKiBjb21wb25lbnQgc2hvdWxkIGJlIHJldXNlZCBhY3Jvc3Mgcm91dGVzLCBvciB3aGV0aGVyIHRvIGRlc3Ryb3kgYW5kIGluc3RhbnRpYXRlIGEgbmV3IGNvbXBvbmVudC5cbiAqXG4gKiBUaGUgYHJvdXRlckNhblJldXNlYCBob29rIGlzIGNhbGxlZCB3aXRoIHR3byB7QGxpbmsgQ29tcG9uZW50SW5zdHJ1Y3Rpb259cyBhcyBwYXJhbWV0ZXJzLCB0aGVcbiAqIGZpcnN0XG4gKiByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnQgcm91dGUgYmVpbmcgbmF2aWdhdGVkIHRvLCBhbmQgdGhlIHNlY29uZCBwYXJhbWV0ZXIgcmVwcmVzZW50aW5nIHRoZVxuICogcHJldmlvdXMgcm91dGUuXG4gKlxuICogSWYgYHJvdXRlckNhblJldXNlYCByZXR1cm5zIG9yIHJlc29sdmVzIHRvIGB0cnVlYCwgdGhlIGNvbXBvbmVudCBpbnN0YW5jZSB3aWxsIGJlIHJldXNlZCBhbmQgdGhlXG4gKiB7QGxpbmsgT25EZWFjdGl2YXRlfSBob29rIHdpbGwgYmUgcnVuLiBJZiBgcm91dGVyQ2FuUmV1c2VgIHJldHVybnMgb3IgcmVzb2x2ZXMgdG8gYGZhbHNlYCwgYSBuZXdcbiAqIGNvbXBvbmVudCB3aWxsIGJlIGluc3RhbnRpYXRlZCwgYW5kIHRoZSBleGlzdGluZyBjb21wb25lbnQgd2lsbCBiZSBkZWFjdGl2YXRlZCBhbmQgcmVtb3ZlZCBhc1xuICogcGFydCBvZiB0aGUgbmF2aWdhdGlvbi5cbiAqXG4gKiBJZiBgcm91dGVyQ2FuUmV1c2VgIHRocm93cyBvciByZWplY3RzLCB0aGUgbmF2aWdhdGlvbiB3aWxsIGJlIGNhbmNlbGxlZC5cbiAqXG4gKiAjIyMgRXhhbXBsZVxuICoge0BleGFtcGxlIHJvdXRlci90cy9yZXVzZS9yZXVzZV9leGFtcGxlLnRzIHJlZ2lvbj0ncmV1c2VDbXAnfVxuICovXG5leHBvcnQgaW50ZXJmYWNlIENhblJldXNlIHtcbiAgcm91dGVyQ2FuUmV1c2UobmV4dEluc3RydWN0aW9uOiBDb21wb25lbnRJbnN0cnVjdGlvbixcbiAgICAgICAgICAgICAgICAgcHJldkluc3RydWN0aW9uOiBDb21wb25lbnRJbnN0cnVjdGlvbik6IGJvb2xlYW4gfFxuICAgICAgUHJvbWlzZTxib29sZWFuPjtcbn1cblxuLyoqXG4gKiBEZWZpbmVzIHJvdXRlIGxpZmVjeWNsZSBtZXRob2QgYHJvdXRlckNhbkRlYWN0aXZhdGVgLCB3aGljaCBpcyBjYWxsZWQgYnkgdGhlIHJvdXRlciB0byBkZXRlcm1pbmVcbiAqIGlmIGEgY29tcG9uZW50IGNhbiBiZSByZW1vdmVkIGFzIHBhcnQgb2YgYSBuYXZpZ2F0aW9uLlxuICpcbiAqIFRoZSBgcm91dGVyQ2FuRGVhY3RpdmF0ZWAgaG9vayBpcyBjYWxsZWQgd2l0aCB0d28ge0BsaW5rIENvbXBvbmVudEluc3RydWN0aW9ufXMgYXMgcGFyYW1ldGVycyxcbiAqIHRoZVxuICogZmlyc3QgcmVwcmVzZW50aW5nIHRoZSBjdXJyZW50IHJvdXRlIGJlaW5nIG5hdmlnYXRlZCB0bywgYW5kIHRoZSBzZWNvbmQgcGFyYW1ldGVyXG4gKiByZXByZXNlbnRpbmcgdGhlIHByZXZpb3VzIHJvdXRlLlxuICpcbiAqIElmIGByb3V0ZXJDYW5EZWFjdGl2YXRlYCByZXR1cm5zIG9yIHJlc29sdmVzIHRvIGBmYWxzZWAsIHRoZSBuYXZpZ2F0aW9uIGlzIGNhbmNlbGxlZC4gSWYgaXRcbiAqIHJldHVybnMgb3JcbiAqIHJlc29sdmVzIHRvIGB0cnVlYCwgdGhlbiB0aGUgbmF2aWdhdGlvbiBjb250aW51ZXMsIGFuZCB0aGUgY29tcG9uZW50IHdpbGwgYmUgZGVhY3RpdmF0ZWRcbiAqICh0aGUge0BsaW5rIE9uRGVhY3RpdmF0ZX0gaG9vayB3aWxsIGJlIHJ1bikgYW5kIHJlbW92ZWQuXG4gKlxuICogSWYgYHJvdXRlckNhbkRlYWN0aXZhdGVgIHRocm93cyBvciByZWplY3RzLCB0aGUgbmF2aWdhdGlvbiBpcyBhbHNvIGNhbmNlbGxlZC5cbiAqXG4gKiAjIyMgRXhhbXBsZVxuICoge0BleGFtcGxlIHJvdXRlci90cy9jYW5fZGVhY3RpdmF0ZS9jYW5fZGVhY3RpdmF0ZV9leGFtcGxlLnRzIHJlZ2lvbj0ncm91dGVyQ2FuRGVhY3RpdmF0ZSd9XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQ2FuRGVhY3RpdmF0ZSB7XG4gIHJvdXRlckNhbkRlYWN0aXZhdGUobmV4dEluc3RydWN0aW9uOiBDb21wb25lbnRJbnN0cnVjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICBwcmV2SW5zdHJ1Y3Rpb246IENvbXBvbmVudEluc3RydWN0aW9uKTogYm9vbGVhbiB8XG4gICAgICBQcm9taXNlPGJvb2xlYW4+O1xufVxuIl19